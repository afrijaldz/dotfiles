import{parse as t}from"@vue/compiler-sfc";import{parse as e,compile as o}from"@vue/compiler-dom";import{FluentSerializer as n,parse as s,Message as c,Identifier as l,serialize as r}from"@fluent/syntax";const a=new n;function u(t){return s(t,{withSpans:!1}).body.reduce(((t,e)=>(e instanceof c&&(t[e.id.name]=function(t){return t.comment=null,a.serializeEntry(t).substring(t.id.name.length+3).trimEnd()}(e)),t)),{})}function f(t,e){const o=s(t,{withSpans:!0});for(const[t,n]of Object.entries(e)){const e=s(`${t} = ${n}`,{withSpans:!1});let r=!1;for(const n of o.body)n instanceof c&&n.id.name===t&&(r=!0,n.value=e.body[0].value);if(!r){const n=new c(new l(t),e.body[0].value);o.body.push(n)}}return r(o,{withJunk:!0})}function i(t){const e=g(t);return e.customBlocks.sort(((t,e)=>t.loc.start.offset-e.loc.start.offset)),e.customBlocks.map((t=>{if("fluent"!==t.type)return;const e=t.attrs.locale;if(null==e||"string"!=typeof e)throw new Error("fluent custom block does not have locale specified");return{locale:e,messages:u(t.content)}})).filter(Boolean)}function p(t,e,o){const n=g(t);let s=n.customBlocks.find((t=>"fluent"===t.type&&t.attrs.locale===e));if(null!=s){const t=f(s.content,o);s.content=t}else s={type:"fluent",attrs:{locale:e},content:f("",o)};const c=function(t){const{template:e,script:o,styles:n,customBlocks:s}=t,c=[...n,...s];return null!=e&&c.push(e),null!=o&&c.push(o),c.sort(((t,e)=>t.loc.start.offset-e.loc.start.offset)),c}(n);return function(t,e,o){var n;const s=null===(n=/\r?\n|\r/g.exec(e))||void 0===n?void 0:n[0];if(null==s)return e;let c=0,l=!1,r=[],a=-1;r=o.reduce(((o,n,r)=>("fluent"===n.type&&n.attrs.locale===t.attrs.locale?(o=(o=o.concat(e.slice(c,n.loc.start.offset))).concat(`${s}${t.content}`),c=n.loc.end.offset,l=!0):(o=o.concat(e.slice(c,n.loc.end.offset)),c=n.loc.end.offset,"fluent"===n.type&&(a=o.join("").length+"</fluent>".length+s.length)),o)),r),r=r.concat(e.slice(c,e.length));let u=r.join("");if(!l){const e=`${s}<fluent locale="${t.attrs.locale}">${s}${t.content}</fluent>${s}`;-1!==a?u=u.slice(0,a)+e+u.slice(a):u+=e}return u}(s,n.source,c)}const m=/&(gt|lt|amp|apos|quot);/g,d={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'};function g(n){return t(n,{sourceMap:!1,ignoreEmpty:!1,pad:!1,compiler:{parse:(t,o)=>e(t,{...o,decodeEntities:t=>t.replace(m,((t,e)=>d[e]))}),compile:o}}).descriptor}export{u as getFtlMessages,i as getVueMessages,f as mergeFtl,p as mergeVue};
